{"version":3,"file":"route-info.js","sourceRoot":"","sources":["../src/route-info.ts"],"names":[],"mappings":"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","sourcesContent":["import { given } from \"n-defensive\";\nimport \"n-ext\";\nimport { ApplicationException } from \"n-exception\";\nimport { RouteParam } from \"./route-param\";\n\n// route format: /api/Product/{id:number}?{name?:string}&{all:boolean}\n\nexport class RouteInfo\n{\n    private readonly _routeTemplate: string;\n    private readonly _routeParams = new Array<RouteParam>();\n    private readonly _routeParamsRegistry: { [index: string]: RouteParam } = {};\n    private readonly _koaRoute: string;\n    \n    \n    public get route(): string { return this._routeTemplate; }\n    public get koaRoute(): string { return this._koaRoute; }\n    public get params(): ReadonlyArray<RouteParam> { return this._routeParams; }\n    \n    \n    public constructor(routeTemplate: string)\n    {\n        given(routeTemplate, \"routeTemplate\").ensureHasValue().ensure(t => !t.isEmptyOrWhiteSpace());\n        routeTemplate = routeTemplate.trim();\n        while (routeTemplate.contains(\" \"))\n            routeTemplate = routeTemplate.replace(\" \", \"\");    \n        \n        this._routeTemplate = routeTemplate;\n        this.populateRouteParams();\n        this._koaRoute = this.generateKoaRoute(this._routeTemplate);\n    }\n    \n    \n    public findRouteParam(key: string): RouteParam\n    {\n        given(key, \"key\").ensureHasValue().ensure(t => !t.isEmptyOrWhiteSpace());\n        return this._routeParamsRegistry[key.trim().toLowerCase()];\n    }\n    \n    public generateUrl(values: any): string\n    {\n        let url = this._routeTemplate;\n        for (let key in values)\n        {\n            let routeParam = this.findRouteParam(key);\n            if (!routeParam) continue;\n            \n            let param = \"{\" + routeParam.param + \"}\";\n            let replacement = routeParam.isQuery ? \"{0}={1}\".format(key, encodeURIComponent(values[key])) : encodeURIComponent(values[key]);\n            url = url.replace(param, replacement);\n        }  \n        // return encodeURI(url);\n        return url;\n    }\n    \n    \n    private populateRouteParams(): void\n    {\n        let index = 1;\n        for (let routeParam of this.extractTemplateParams(this._routeTemplate).map(t => new RouteParam(t)))\n        {\n            let key = routeParam.paramKey.toLowerCase();\n            if (this._routeParamsRegistry[key])\n                throw new ApplicationException(\"Invalid route template. Duplicate route params (case insensitive) detected.\");\n            \n            routeParam.setOrder(index++);\n            this._routeParamsRegistry[key] = routeParam;\n            this._routeParams.push(routeParam);\n        }\n    }\n    \n    private extractTemplateParams(routeTemplate: string): Array<string>\n    {\n        let templateParams = new Array<string>();\n        let queryFound = false;\n        let startFound = false;\n        let startIndex = 0;\n        \n        for (let i = 0; i < routeTemplate.length; i++)\n        {\n            if (routeTemplate[i] === \"?\" && !startFound)\n            {\n                if (queryFound)\n                    throw new ApplicationException(\"Invalid route template. Unresolvable '?' characters detected.\");\n                \n                queryFound = true;\n            }    \n            \n            if (routeTemplate[i] === \"{\")\n            {\n                if (startFound)\n                    throw new ApplicationException(\"Invalid route template. Braces do not match.\");\n\n                startFound = true;\n                startIndex = i + 1;\n            }\n            else if (routeTemplate[i] === \"}\")\n            {\n                if (!startFound)\n                    throw new ApplicationException(\"Invalid route template. Braces do not match.\");\n\n                let value = routeTemplate.substring(startIndex, i);\n                value = value.trim();\n                if (queryFound) value = value + \"[Q]\";\n                templateParams.push(value);\n                startFound = false;\n            }\n        }\n        \n        return templateParams;\n    }\n    \n    private generateKoaRoute(routeTemplate: string): string\n    {\n        for (let routeParam of this._routeParams)\n        {\n            let asItWas = \"{\" + routeParam.param + \"}\";\n            if (!routeTemplate.contains(asItWas))\n                throw new ApplicationException(\"Invalid route template.\"); \n\n            routeTemplate = routeTemplate.replace(asItWas, \":{0}\".format(routeParam.paramKey));\n        }    \n        \n        if (routeTemplate.contains(\"?\"))\n        {\n            let splitted = routeTemplate.split(\"?\");\n            if (splitted.length > 2)\n                throw new ApplicationException(\"Invalid route template. Unresolvable '?' characters detected.\");\n            \n            routeTemplate = splitted[0];\n        }    \n        \n        return routeTemplate;\n    }\n}"]}