{"version":3,"file":"exception-handler.js","sourceRoot":"","sources":["../src/exception-handler.ts"],"names":[],"mappings":";;AACA,uCAAuC;AAEvC;CAGC;AAHD,4CAGC;AAED,+BAA+B;AAC/B,IAAI;AACJ,6BAA6B;AAC7B,gCAAgC;AAGhC,uDAAuD;AACvD,6DAA6D;AAG7D,wCAAwC;AACxC,yDAAyD;AACzD,yDAAyD;AACzD,QAAQ;AACR,iGAAiG;AAEjG,6BAA6B;AAC7B,mCAAmC;AACnC,QAAQ;AACR,IAAI","sourcesContent":["import { Exception } from \"n-exception\";\n// import { given } from \"n-defensive\";\n\nexport abstract class ExceptionHandler\n{\n    public abstract handle(exp: Exception): Promise<any>;\n}\n\n// export class ExceptionResult\n// {\n//     private _code: number;\n//     private _message: string;\n\n\n//     public get code(): number { return this._code; }\n//     public get message(): string { return this._message; }\n\n\n//     public constructor(code: number);\n//     public constructor(code: number, message: string);\n//     public constructor(code: number, message?: string)\n//     {\n//         given(code, \"code\").ensureHasValue().ensure(t => t >= 400, \"has to be an error code\");\n\n//         this._code = code;\n//         this._message = message;\n//     }\n// }"]}