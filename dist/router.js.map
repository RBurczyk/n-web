{"version":3,"file":"router.js","sourceRoot":"","sources":["../src/router.ts"],"names":[],"mappings":"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","sourcesContent":["import * as Koa from \"koa\";\nimport * as KoaRouter from \"koa-router\";\nimport { Container, Scope } from \"n-ject\";\nimport { given } from \"n-defensive\";\nimport { ControllerRegistration } from \"./controller-registration\";\nimport { Controller } from \"./controller\";\nimport { Exception, ApplicationException } from \"n-exception\";\nimport { Route } from \"./route\";\nimport { ParamParseException } from \"./param-parse-exception\";\nimport { HttpMethods } from \"./http-method\";\n\nexport class Router\n{\n    private readonly _koa: Koa;\n    private readonly _container: Container;\n    private readonly _koaRouter: KoaRouter;\n    private readonly _controllers = new Array<ControllerRegistration>();\n    \n    \n    public constructor(koa: Koa, container: Container)\n    {\n        given(koa, \"koa\").ensureHasValue();\n        given(container, \"container\").ensureHasValue();\n        \n        this._koa = koa;\n        this._container = container;\n        this._koaRouter = new KoaRouter();\n    }\n    \n    \n    public registerControllers(...controllers: Function[]): void\n    {\n        for (let controller of controllers)\n        {\n            if (this._controllers.some(t => t.controller === controller))\n                throw new ApplicationException(\"Duplicate registration detected for Controller '{0}'.\"\n                    .format((controller as Object).getTypeName()));\n\n            let registration = new ControllerRegistration(controller);\n            this._controllers.push(registration);\n            this._container.registerScoped(registration.name, registration.controller);\n        }\n    }\n    \n    public configureRouting(): void\n    {\n        for (let registration of this._controllers)\n        {\n            switch (registration.method)\n            {\n                case HttpMethods.Get:\n                    this.configureGet(registration);\n                    break;\n                case HttpMethods.Post:\n                    this.configurePost(registration);\n                    break;\n                case HttpMethods.Put:\n                    this.configurePut(registration);\n                    break;\n                case HttpMethods.Delete:\n                    this.configureDelete(registration);\n                    break;\n            }\n        }\n\n        this._koa.use(this._koaRouter.routes());\n        this._koa.use(this._koaRouter.allowedMethods());\n    }\n\n    private configureGet(registration: ControllerRegistration): void\n    {\n        this._koaRouter.get(registration.route.koaRoute, async (ctx) =>\n        {\n            await this.handleRequest(ctx, registration, false);\n        });\n    }\n    \n    private configurePost(registration: ControllerRegistration): void\n    {\n        this._koaRouter.post(registration.route.koaRoute, async (ctx) =>\n        {\n            await this.handleRequest(ctx, registration, true);\n        });\n    }\n\n    private configurePut(registration: ControllerRegistration): void\n    {\n        this._koaRouter.put(registration.route.koaRoute, async (ctx) =>\n        {\n            await this.handleRequest(ctx, registration, true);\n        });\n    }\n\n    private configureDelete(registration: ControllerRegistration): void\n    {\n        this._koaRouter.del(registration.route.koaRoute, async (ctx) =>\n        {\n            await this.handleRequest(ctx, registration, true);\n        });\n    }\n    \n    private async handleRequest(ctx: KoaRouter.IRouterContext, registration: ControllerRegistration,\n        processBody: boolean): Promise<void>\n    {\n        let args;\n\n        try \n        {\n            args = this.createRouteArgs(registration.route, ctx);\n        }\n        catch (error)\n        {\n            let exp = error as Exception;\n            if (exp.name === (<Object>ParamParseException).getTypeName())\n            {\n                ctx.throw(404);\n            }\n\n            throw error;\n        }\n        \n        if (processBody)\n            args.push(ctx.request.body);\n\n        let scope: Scope;\n        let controllerInstance: Controller;\n        try \n        {\n            scope = ctx.state.scope as Scope;\n            controllerInstance = scope.resolve<Controller>(registration.name);\n        } catch (error) \n        {\n            // TODO: do something\n            throw error;\n        }\n        \n        let result: any;\n        try \n        {\n            result = await controllerInstance.execute(...args);\n        }\n        catch (error)\n        {\n            // TODO: do something\n            throw error;\n        }\n        \n        ctx.body = result;\n    }\n    \n    private createRouteArgs(route: Route, ctx: KoaRouter.IRouterContext): Array<any>\n    {\n        let pathParams = ctx.params ? ctx.params : {};\n        let queryParams = ctx.query ? ctx.query : {};\n        let model: { [index: string]: any } = {};\n\n        for (let key in queryParams)\n        {\n            let routeParam = route.findRouteParam(key);\n            if (!routeParam)\n                continue;\n\n            model[routeParam.paramKey] = routeParam.parseParam(queryParams[key]);\n        }\n\n        for (let key in pathParams)\n        {\n            let routeParam = route.findRouteParam(key);\n            if (!routeParam)\n                throw new ParamParseException(\"Path param not found.\");\n\n            model[routeParam.paramKey] = routeParam.parseParam(pathParams[key]);\n        }\n\n        let result = [];\n        for (let routeParam of route.params)\n        {\n            let value = model[routeParam.paramKey];\n            if (value === undefined || model[routeParam.paramKey] == null)\n            {\n                if (!routeParam.isOptional)\n                    throw new ParamParseException(\"Required param not provided.\");\n\n                value = null;\n            }\n            result.push(value);\n        }\n\n        return result;\n    }\n}"]}