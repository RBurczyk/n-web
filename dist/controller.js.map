{"version":3,"file":"controller.js","sourceRoot":"","sources":["../src/controller.ts"],"names":[],"mappings":";;AAAA,iBAAe;AACf,6CAAoC;AACpC,6CAAyC;AACzC,uEAAkE;AAElE,SAAS;AACT;IAKc,WAAW,CAAC,KAAa,EAAE,MAAc,EAAE,OAAgB;QAEjE,mBAAK,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC,cAAc,EAAE,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,mBAAmB,EAAE,CAAC,CAAC;QAC7E,KAAK,GAAG,KAAK,CAAC,IAAI,EAAE,CAAC;QAErB,EAAE,CAAC,CAAC,OAAO,KAAK,SAAS,IAAI,OAAO,IAAI,IAAI,CAAC,CAC7C,CAAC;YACG,OAAO,GAAG,OAAO,CAAC,IAAI,EAAE,CAAC;YACzB,EAAE,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;gBACtB,OAAO,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,EAAE,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;YAEpD,KAAK,GAAG,OAAO,GAAG,KAAK,CAAC;QAC5B,CAAC;QAED,EAAE,CAAC,CAAC,MAAM,KAAK,SAAS,IAAI,MAAM,KAAK,IAAI,CAAC;YACxC,MAAM,CAAC,KAAK,CAAC;QAEjB,IAAI,GAAG,GAAG,IAAI,sBAAS,CAAC,KAAK,CAAC,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;QACnD,MAAM,CAAC,GAAG,CAAC,UAAU,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;IACnC,CAAC;IAES,QAAQ,CAAC,GAAW;QAE1B,mBAAK,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC,cAAc,EAAE,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,mBAAmB,EAAE,CAAC,CAAC;QACzE,MAAM,IAAI,+CAAqB,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC,CAAC;IAChD,CAAC;CACJ;AA/BD,gCA+BC","sourcesContent":["import \"n-ext\";\nimport { given } from \"n-defensive\";\nimport { RouteInfo } from \"./route-info\";\nimport { HttpRedirectException } from \"./http-redirect-exception\";\n\n// public\nexport abstract class Controller\n{\n    public abstract execute(...params: any[]): Promise<any>;\n    \n    \n    protected generateUrl(route: string, params: Object, baseUrl?: string): string\n    {\n        given(route, \"route\").ensureHasValue().ensure(t => !t.isEmptyOrWhiteSpace());\n        route = route.trim();\n        \n        if (baseUrl !== undefined && baseUrl != null)\n        {\n            baseUrl = baseUrl.trim();\n            if (baseUrl.endsWith(\"/\"))\n                baseUrl = baseUrl.substr(0, baseUrl.length - 1);\n            \n            route = baseUrl + route;\n        }    \n        \n        if (params === undefined || params === null)\n            return route;\n        \n        let url = new RouteInfo(route).generateUrl(params);\n        return url.replaceAll(\" \", \"\");\n    }\n    \n    protected redirect(url: string): void\n    {\n        given(url, \"url\").ensureHasValue().ensure(t => !t.isEmptyOrWhiteSpace());\n        throw new HttpRedirectException(url.trim());\n    }\n}"]}