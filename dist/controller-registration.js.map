{"version":3,"file":"controller-registration.js","sourceRoot":"","sources":["../src/controller-registration.ts"],"names":[],"mappings":";;AAAA,4BAA0B;AAC1B,2CAAoC;AACpC,2CAAmD;AACnD,6CAA8D;AAC9D,2CAA+C;AAC/C,iCAAgC;AAEhC;IAcI,gCAAmB,UAAoB;QAEnC,mBAAK,CAAC,UAAU,EAAE,YAAY,CAAC,CAAC,cAAc,EAAE,CAAC;QAEjD,IAAI,CAAC,KAAK,GAAY,UAAW,CAAC,WAAW,EAAE,CAAC;QAChD,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC;QAE9B,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,cAAc,CAAC,8BAAgB,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;YAC5D,MAAM,IAAI,kCAAoB,CAAC,qDAAqD;iBAC/E,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;QAE7B,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,cAAc,CAAC,4BAAe,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;YAC3D,MAAM,IAAI,kCAAoB,CAAC,oDAAoD;iBAC9E,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;QAE7B,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC,cAAc,CAAC,8BAAgB,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;QAC1E,IAAI,CAAC,MAAM,GAAG,IAAI,aAAK,CAAC,OAAO,CAAC,cAAc,CAAC,4BAAe,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;IACvF,CAAC;IAvBD,sBAAW,wCAAI;aAAf,cAA4B,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;;;OAAA;IAChD,sBAAW,8CAAU;aAArB,cAAoC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;;;OAAA;IAC9D,sBAAW,0CAAM;aAAjB,cAA8B,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;;;OAAA;IACpD,sBAAW,yCAAK;aAAhB,cAA4B,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;;;OAAA;IAqBrD,6BAAC;AAAD,CAAC,AAhCD,IAgCC;AAhCY,wDAAsB","sourcesContent":["import \"reflect-metadata\";\nimport { given } from \"n-defensive\";\nimport { ApplicationException } from \"n-exception\";\nimport { httpMethodSymbol, HttpMethods } from \"./http-method\";\nimport { httpRouteSymbol } from \"./http-route\";\nimport { Route } from \"./route\";\n\nexport class ControllerRegistration\n{\n    private readonly _name: string;\n    private readonly _controller: Function;\n    private readonly _method: string;\n    private readonly _route: Route;\n\n\n    public get name(): string { return this._name; }\n    public get controller(): Function { return this._controller; }\n    public get method(): string { return this._method; }\n    public get route(): Route { return this._route; }\n\n\n    public constructor(controller: Function)\n    {\n        given(controller, \"controller\").ensureHasValue();\n\n        this._name = (<Object>controller).getTypeName();\n        this._controller = controller;\n\n        if (!Reflect.hasOwnMetadata(httpMethodSymbol, this._controller))\n            throw new ApplicationException(\"Controller '{0}' does not have http method applied.\"\n                .format(this._name));\n\n        if (!Reflect.hasOwnMetadata(httpRouteSymbol, this._controller))\n            throw new ApplicationException(\"Controller '{0}' does not have http route applied.\"\n                .format(this._name));\n\n        this._method = Reflect.getOwnMetadata(httpMethodSymbol, this._controller);\n        this._route = new Route(Reflect.getOwnMetadata(httpRouteSymbol, this._controller));\n    }\n}"]}