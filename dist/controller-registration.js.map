{"version":3,"file":"controller-registration.js","sourceRoot":"","sources":["../src/controller-registration.ts"],"names":[],"mappings":";;AAAA,4BAA0B;AAC1B,6CAAoC;AACpC,6CAAsE;AACtE,+CAA8D;AAC9D,6CAA+C;AAC/C,mCAAgC;AAChC,iCAAoC;AACpC,iBAAe;AACf,yBAAyB;AACzB,6BAA6B;AAE7B;IAgBI,YAAmB,UAAoB;QAVtB,UAAK,GAAW,IAAI,CAAC;QAYlC,mBAAK,CAAC,UAAU,EAAE,YAAY,CAAC,CAAC,cAAc,EAAE,CAAC;QAEjD,IAAI,CAAC,KAAK,GAAY,UAAW,CAAC,WAAW,EAAE,CAAC;QAChD,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC;QAE9B,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,cAAc,CAAC,8BAAgB,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;YAC5D,MAAM,IAAI,kCAAoB,CAAC,qDAAqD;iBAC/E,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;QAE7B,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,cAAc,CAAC,4BAAe,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;YAC3D,MAAM,IAAI,kCAAoB,CAAC,oDAAoD;iBAC9E,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;QAE7B,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC,cAAc,CAAC,8BAAgB,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;QAC1E,IAAI,CAAC,MAAM,GAAG,IAAI,aAAK,CAAC,OAAO,CAAC,cAAc,CAAC,4BAAe,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;QAEnF,EAAE,CAAC,CAAC,OAAO,CAAC,cAAc,CAAC,iBAAU,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC,CACzD,CAAC;YACG,IAAI,QAAQ,GAAG,OAAO,CAAC,cAAc,CAAC,iBAAU,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;YACpE,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,QAAQ,CAAC,CAAC;YAC9C,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;gBACzB,MAAM,IAAI,+BAAiB,CAAC,mBAAmB,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE,gBAAgB,CAAC,CAAC;YAExF,IAAI,CAAC,KAAK,GAAG,EAAE,CAAC,YAAY,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;QACnD,CAAC;IACL,CAAC;IAlCD,IAAW,IAAI,KAAa,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;IAChD,IAAW,UAAU,KAAe,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;IAC9D,IAAW,MAAM,KAAa,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;IACpD,IAAW,KAAK,KAAY,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;IACjD,IAAW,IAAI,KAAa,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;CA+BnD;AA5CD,wDA4CC","sourcesContent":["import \"reflect-metadata\";\nimport { given } from \"n-defensive\";\nimport { ApplicationException, ArgumentException } from \"n-exception\";\nimport { httpMethodSymbol, HttpMethods } from \"./http-method\";\nimport { httpRouteSymbol } from \"./http-route\";\nimport { Route } from \"./route\";\nimport { viewSymbol } from \"./view\";\nimport \"n-ext\";\nimport * as fs from \"fs\";\nimport * as path from \"path\";\n\nexport class ControllerRegistration\n{\n    private readonly _name: string;\n    private readonly _controller: Function;\n    private readonly _method: string;\n    private readonly _route: Route;\n    private readonly _view: string = null;\n\n\n    public get name(): string { return this._name; }\n    public get controller(): Function { return this._controller; }\n    public get method(): string { return this._method; }\n    public get route(): Route { return this._route; }\n    public get view(): string { return this._view; }\n\n\n    public constructor(controller: Function)\n    {\n        given(controller, \"controller\").ensureHasValue();\n\n        this._name = (<Object>controller).getTypeName();\n        this._controller = controller;\n\n        if (!Reflect.hasOwnMetadata(httpMethodSymbol, this._controller))\n            throw new ApplicationException(\"Controller '{0}' does not have http method applied.\"\n                .format(this._name));\n\n        if (!Reflect.hasOwnMetadata(httpRouteSymbol, this._controller))\n            throw new ApplicationException(\"Controller '{0}' does not have http route applied.\"\n                .format(this._name));\n\n        this._method = Reflect.getOwnMetadata(httpMethodSymbol, this._controller);\n        this._route = new Route(Reflect.getOwnMetadata(httpRouteSymbol, this._controller));\n        \n        if (Reflect.hasOwnMetadata(viewSymbol, this._controller))\n        {\n            let filePath = Reflect.getOwnMetadata(viewSymbol, this._controller);\n            filePath = path.join(process.cwd(), filePath);\n            if (!fs.existsSync(filePath))\n                throw new ArgumentException(\"viewFilePath[{0}]\".format(filePath), \"does not exist\");\n            \n            this._view = fs.readFileSync(filePath, \"utf8\");\n        }    \n    }\n}"]}