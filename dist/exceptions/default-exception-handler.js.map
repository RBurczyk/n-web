{"version":3,"file":"default-exception-handler.js","sourceRoot":"","sources":["../../src/exceptions/default-exception-handler.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,0DAA2E;AAC3E,0DAAiD;AACjD,8BAA4B;AAC5B,2DAAuD;AACvD,qDAAiD;AACjD,8CAA2D;AAE3D,SAAS;AACT,6BAAqC,SAAQ,oCAAgB;IAOzD,YAAmB,MAAc,EAAE,aAAa,GAAG,KAAK;QAEpD,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,qBAAa,EAAE,CAAC;QACrD,IAAI,CAAC,cAAc,GAAG,CAAC,CAAC,aAAa,CAAC;QACtC,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC;IACxB,CAAC;IAGY,MAAM,CAAC,GAAc;;YAE9B,EAAE,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC;gBACpB,MAAM,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;YAExB,MAAM,IAAI,GAAY,GAAI,CAAC,WAAW,EAAE,CAAC;YACzC,MAAM,OAAO,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;YACrC,EAAE,CAAC,CAAC,OAAO,CAAC;gBACR,MAAM,CAAC,MAAM,OAAO,CAAC,GAAG,CAAC,CAAC;YAC9B,IAAI;gBACA,MAAM,IAAI,8BAAa,CAAC,GAAG,EAAE,6CAA6C,CAAC,CAAC;QACpF,CAAC;KAAA;IAGS,eAAe,CAAC,aAAuB,EAAE,OAAuC;QAEtF,mBAAK,CAAC,aAAa,EAAE,eAAe,CAAC,CAAC,cAAc,EAAE,CAAC,gBAAgB,EAAE,CAAC;QAC1E,mBAAK,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC,cAAc,EAAE,CAAC,gBAAgB,EAAE,CAAC;QAE9D,MAAM,IAAI,GAAY,aAAc,CAAC,WAAW,EAAE,CAAC;QACnD,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;YACrB,MAAM,IAAI,kCAAoB,CAAC,sDAAsD,IAAI,IAAI,CAAC,CAAC;QAEnG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,GAAG,OAAO,CAAC;IACnC,CAAC;IAES,GAAG,CAAC,GAA4B;QAEtC,IAAI,UAAU,GAAG,EAAE,CAAC;QACpB,EAAE,CAAC,CAAC,GAAG,YAAY,uBAAS,CAAC;YACzB,UAAU,GAAG,GAAG,CAAC,QAAQ,EAAE,CAAC;QAChC,IAAI,CAAC,EAAE,CAAC,CAAC,GAAG,YAAY,KAAK,CAAC;YAC1B,UAAU,GAAG,GAAG,CAAC,KAAK,CAAC;QAC3B,IAAI;YACA,UAAU,GAAG,GAAG,CAAC,QAAQ,EAAE,CAAC;QAEhC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;IAC7C,CAAC;CACJ;AAtDD,0DAsDC","sourcesContent":["import { Exception, ApplicationException } from \"@nivinjoseph/n-exception\";\nimport { given } from \"@nivinjoseph/n-defensive\";\nimport \"@nivinjoseph/n-ext\";\nimport { ExceptionHandler } from \"./exception-handler\";\nimport { HttpException } from \"./http-exception\";\nimport { Logger, ConsoleLogger } from \"@nivinjoseph/n-log\";\n\n// public\nexport class DefaultExceptionHandler extends ExceptionHandler\n{\n    private readonly _logger: Logger;\n    private readonly _logEverything: boolean;\n    private readonly _handlers: { [index: string]: (exp: Exception) => Promise<any> };\n\n\n    public constructor(logger: Logger, logEverything = false)\n    {\n        super();\n        this._logger = logger ? logger : new ConsoleLogger();\n        this._logEverything = !!logEverything;\n        this._handlers = {};\n    }\n\n\n    public async handle(exp: Exception): Promise<any>\n    {\n        if (this._logEverything)\n            await this.log(exp);\n\n        const name = (<Object>exp).getTypeName();\n        const handler = this._handlers[name];\n        if (handler)\n            return await handler(exp);\n        else\n            throw new HttpException(500, \"There was an error processing your request.\");\n    }\n\n\n    protected registerHandler(exceptionType: Function, handler: (e: Exception) => Promise<any>): void\n    {\n        given(exceptionType, \"exceptionType\").ensureHasValue().ensureIsFunction();\n        given(handler, \"handler\").ensureHasValue().ensureIsFunction();\n\n        const name = (<Object>exceptionType).getTypeName();\n        if (this._handlers[name])\n            throw new ApplicationException(`Duplicate handler registration for Exception type '${name}'.`);\n\n        this._handlers[name] = handler;\n    }\n\n    protected log(exp: Exception | Error | any): Promise<void>\n    {\n        let logMessage = \"\";\n        if (exp instanceof Exception)\n            logMessage = exp.toString();\n        else if (exp instanceof Error)\n            logMessage = exp.stack;\n        else\n            logMessage = exp.toString();\n        \n        return this._logger.logError(logMessage);\n    }\n}"]}