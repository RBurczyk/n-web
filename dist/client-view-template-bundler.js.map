{"version":3,"file":"client-view-template-bundler.js","sourceRoot":"","sources":["../src/client-view-template-bundler.ts"],"names":[],"mappings":"AAAA,4BAA4B;AAC5B,gCAAgC;AAChC,uCAAuC;AACvC,kBAAkB;AAClB,mDAAmD;AAGnD,mDAAmD;AAEnD,YAAY;AACZ,yCAAyC;AACzC,IAAI;AACJ,sCAAsC;AACtC,gDAAgD;AAGhD,wDAAwD;AACxD,QAAQ;AACR,sFAAsF;AACtF,oCAAoC;AACpC,qBAAqB;AACrB,kCAAkC;AAClC,QAAQ;AAER,8BAA8B;AAC9B,QAAQ;AACR,oDAAoD;AACpD,4CAA4C;AAE5C,+DAA+D;AAC/D,wCAAwC;AACxC,mFAAmF;AAEnF,mFAAmF;AACnF,qGAAqG;AAGrG,oDAAoD;AACpD,mEAAmE;AAEnE,2BAA2B;AAC3B,2CAA2C;AAC3C,YAAY;AACZ,kDAAkD;AAClD,0EAA0E;AAC1E,+DAA+D;AAC/D,kGAAkG;AAClG,0CAA0C;AAC1C,YAAY;AAEZ,2BAA2B;AAC3B,8CAA8C;AAE9C,yBAAyB;AACzB,QAAQ;AAER,2FAA2F;AAC3F,QAAQ;AACR,0CAA0C;AAC1C,YAAY;AACZ,0CAA0C;AAC1C,sBAAsB;AACtB,YAAY;AAEZ,mDAAmD;AACnD,YAAY;AACZ,oDAAoD;AACpD,sCAAsC;AACtC,yFAAyF;AACzF,YAAY;AACZ,QAAQ;AACR,IAAI","sourcesContent":["// import * as fs from \"fs\";\n// import * as path from \"path\";\n// import { given } from \"n-defensive\";\n// import \"n-ext\";\n// import { ArgumentException } from \"n-exception\";\n\n\n// let templates: { [index: string]: string } = {};\n\n// // public\n// export class ClientViewTemplateBundler\n// {\n//     private readonly _path: string;\n//     private readonly _cache: boolean = false;\n\n\n//     public constructor(path: string, cache?: boolean)\n//     {\n//         given(path, \"path\").ensureHasValue().ensure(t => !t.isEmptyOrWhiteSpace());\n//         this._path = path.trim();\n//         if (cache)\n//             this._cache = true;\n//     }\n\n//     public render(): string\n//     {\n//         if (this._cache && templates[this._path])\n//             return templates[this._path];\n\n//         let filePath = path.join(process.cwd(), this._path);\n//         if (!fs.existsSync(filePath))\n//             throw new ArgumentException(`Path [${filePath}]`, \"does not exist\");\n\n//         if (!filePath.endsWith(\".html\") && !fs.statSync(filePath).isDirectory())\n//             throw new ArgumentException(`Path [${filePath}]`, \"is not a .html file or directory\");\n\n\n//         let filesToProcess = new Array<string>();\n//         this.accumulateFilesToProcess(filePath, filesToProcess);\n\n//         let result = \"\";\n//         for (let item of filesToProcess)\n//         {\n//             let fileName = path.basename(item);\n//             let id = fileName.replace(\".html\", \"\").split(\"-\").join(\"\");\n//             let fileContent = fs.readFileSync(item, \"utf8\");\n//             let template = `<script type=\"text/x-template\" id=\"${id}\">${fileContent}</script>`;\n//             result = result + template;\n//         }\n\n//         if (this._cache)\n//             templates[this._path] = result;\n\n//         return result;\n//     }\n\n//     private accumulateFilesToProcess(filePath: string, accumulator: Array<string>): void\n//     {\n//         if (filePath.endsWith(\".html\"))\n//         {\n//             accumulator.push(filePath);\n//             return;\n//         }\n\n//         if (fs.statSync(filePath).isDirectory())\n//         {\n//             let files = fs.readdirSync(filePath);\n//             for (let item of files)\n//                 this.accumulateFilesToProcess(path.join(filePath, item), accumulator);\n//         }\n//     }\n// }"]}