{"version":3,"file":"client-view-template-bundler.js","sourceRoot":"","sources":["../src/client-view-template-bundler.ts"],"names":[],"mappings":"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","sourcesContent":["import * as fs from \"fs\";\nimport * as path from \"path\";\nimport { given } from \"n-defensive\";\nimport \"n-ext\";\nimport { ArgumentException } from \"n-exception\";\n\n\nlet templates: { [index: string]: string } = {};\n\n// public\nexport class ClientViewTemplateBundler\n{\n    private readonly _path: string;\n    private readonly _cache: boolean = false;\n\n\n    public constructor(path: string, cache?: boolean)\n    {\n        given(path, \"path\").ensureHasValue().ensure(t => !t.isEmptyOrWhiteSpace());\n        this._path = path.trim();\n        if (cache)\n            this._cache = true;\n    }\n\n    public render(): string\n    {\n        if (this._cache && templates[this._path])\n            return templates[this._path];\n\n        let filePath = path.join(process.cwd(), this._path);\n        if (!fs.existsSync(filePath))\n            throw new ArgumentException(`Path [${filePath}]`, \"does not exist\");\n\n        if (!filePath.endsWith(\".html\") && !fs.statSync(filePath).isDirectory())\n            throw new ArgumentException(`Path [${filePath}]`, \"is not a .html file or directory\");\n\n\n        let filesToProcess = new Array<string>();\n        this.accumulateFilesToProcess(filePath, filesToProcess);\n\n        let result = \"\";\n        for (let item of filesToProcess)\n        {\n            let fileName = path.basename(item);\n            let id = fileName.replace(\".html\", \"\").split(\"-\").join(\"\");\n            let fileContent = fs.readFileSync(item, \"utf8\");\n            let template = `<script type=\"text/x-template\" id=\"${id}\">${fileContent}</script>`;\n            result = result + template;\n        }\n\n        if (this._cache)\n            templates[this._path] = result;\n\n        return result;\n    }\n\n    private accumulateFilesToProcess(filePath: string, accumulator: Array<string>): void\n    {\n        if (filePath.endsWith(\".html\"))\n        {\n            accumulator.push(filePath);\n            return;\n        }\n\n        if (fs.statSync(filePath).isDirectory())\n        {\n            let files = fs.readdirSync(filePath);\n            for (let item of files)\n                this.accumulateFilesToProcess(path.join(filePath, item), accumulator);\n        }\n    }\n}"]}