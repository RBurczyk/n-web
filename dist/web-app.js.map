{"version":3,"file":"web-app.js","sourceRoot":"","sources":["../src/web-app.ts"],"names":[],"mappings":"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","sourcesContent":["import * as Koa from \"koa\";\nimport * as KoaBodyParser from \"koa-bodyparser\";\nimport { Container, ComponentInstaller, Scope } from \"n-ject\";\nimport { given } from \"n-defensive\";\nimport { Router } from \"./router\";\nimport { Exception } from \"n-exception\";\nimport { ExceptionLogger } from \"./exception-logger\";\nimport { ExceptionHandler } from \"./exception-handler\";\nimport { HttpException } from \"./http-exception\";\n\n// public\nexport class WebApp\n{\n    private readonly _port: number;\n    private readonly _koa: Koa;\n    private readonly _container: Container;\n    private readonly _router: Router;\n    private readonly _exceptionLoggerKey = \"$exceptionLogger\";\n    private _hasExceptionLogger = false;\n    private readonly _exceptionHandlerKey = \"$exceptionHandler\";\n    private _hasExceptionHandler = false;\n    \n    \n    public constructor(port: number)\n    {\n        given(port, \"port\").ensureHasValue();\n        this._port = port;\n        this._koa = new Koa();\n        this._container = new Container();\n        this._router = new Router(this._koa, this._container);\n    }\n    \n    public registerControllers(...controllerClasses: Function[]): this\n    {\n        this._router.registerControllers(...controllerClasses);\n        return this;\n    }\n    \n    public registerInstaller(installer: ComponentInstaller): this\n    {\n        given(installer, \"installer\").ensureHasValue();\n        this._container.install(installer);\n        return this;\n    }\n    \n    public registerExceptionLogger(exceptionLoggerClass: Function): this\n    {\n        given(exceptionLoggerClass, \"exceptionLoggerClass\").ensureHasValue();\n        this._container.registerScoped(this._exceptionLoggerKey, exceptionLoggerClass);\n        this._hasExceptionLogger = true;\n        return this;\n    }\n    \n    public registerExceptionHandler(exceptionHandlerClass: Function): this\n    {\n        given(exceptionHandlerClass, \"exceptionHandlerClass\").ensureHasValue();\n        this._container.registerScoped(this._exceptionHandlerKey, exceptionHandlerClass);\n        this._hasExceptionHandler = true;\n        return this;\n    }\n    \n    public bootstrap(): void\n    {\n        this.configureContainer();\n        this.configureScoping();\n        this.configureHttpExceptionHandling();\n        this.configureExceptionHandling();\n        this.configureExceptionLogging();\n        this.configureErrorTrapping();\n        // this.configureAuthentication();\n        // this.configureAuthorization();\n        this.configureBodyParser();\n        this.configureRouting(); // must be last\n        this._koa.listen(this._port);\n    }\n    \n    private configureContainer(): void\n    {\n        this._container.bootstrap();\n    }\n    \n    private configureScoping(): void\n    {\n        this._koa.use(async (ctx, next) =>\n        {\n            ctx.state.scope = this._container.createScope();\n            await next();\n        });\n    }\n    \n    private configureHttpExceptionHandling(): void\n    {\n        this._koa.use(async (ctx, next) => \n        {\n            try \n            {\n                await next();\n            } \n            catch (error) \n            {\n                let exp = error as HttpException;\n                if (exp.name !== \"HttpException\")\n                    throw error;\n                    \n                ctx.status = exp.statusCode;\n                if (exp.body !== null)\n                    ctx.body = exp.body;\n            }\n        });\n    }\n    \n    private configureExceptionHandling(): void\n    {\n        this._koa.use(async (ctx, next) =>\n        {\n            try \n            {\n                await next();\n            }\n            catch (error)\n            {\n                if (!this._hasExceptionHandler)\n                    throw error;\n                \n                let exp = error as Exception;\n                if (exp.name === \"HttpException\")\n                    throw error;\n                    \n                let scope = ctx.state.scope as Scope;\n                let exceptionHandler = scope.resolve<ExceptionHandler>(this._exceptionHandlerKey);\n                ctx.body = await exceptionHandler.handle(exp);\n            }\n        });\n    }\n    \n    private configureExceptionLogging(): void\n    {\n        this._koa.use(async (ctx, next) =>\n        {\n            try \n            {\n                await next();\n            }\n            catch (error)\n            {\n                if (!this._hasExceptionLogger)\n                    throw error;    \n                \n                let exp = error as Exception;\n                if (exp.name === \"HttpException\")\n                    throw error;\n                \n                let scope = ctx.state.scope as Scope;\n                let exceptionLogger = scope.resolve<ExceptionLogger>(this._exceptionLoggerKey);\n                await exceptionLogger.log(exp);\n            }\n        });\n    }\n    \n    // private configureAuthentication(): void\n    // {\n    //     this._koa.use(async (ctx, next) => \n    //     {\n    //         ctx.he\n    //     });\n    // }\n    \n    // private configureAuthorization(): void\n    // {\n        \n    // }\n    \n    private configureErrorTrapping(): void\n    {\n        this._koa.use(async (ctx, next) =>\n        {\n            try \n            {\n                await next();\n            }\n            catch (error)\n            {\n                if (error instanceof Error)\n                    throw new Exception(\"Caught Error.\", error);\n                \n                if (error instanceof Exception)\n                    throw error;\n                \n                throw new Exception(error.toString());\n            }\n        });\n    }\n    \n    private configureBodyParser(): void\n    {\n        this._koa.use(KoaBodyParser({strict: true}));\n    }\n    \n    private configureRouting(): void\n    {\n        this._router.configureRouting();\n    }\n}"]}