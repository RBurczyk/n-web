{"version":3,"file":"bundle-file.js","sourceRoot":"","sources":["../../src/bundling/bundle-file.ts"],"names":[],"mappings":";;AAAA,6CAAoC;AACpC,yBAAyB;AACzB,6BAA6B;AAG7B;IAMI,IAAW,IAAI,KAAa,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;IAGhD,YAAmB,IAAY;QAE3B,mBAAK,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC,cAAc,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,mBAAmB,EAAE,CAAC,CAAC;QAE3E,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;QACjC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;IACtB,CAAC;IAGM,IAAI;QAEP,MAAM,CAAC,EAAE,CAAC,YAAY,CAAC,IAAI,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;IAC/C,CAAC;CACJ;AAtBD,gCAsBC","sourcesContent":["import { given } from \"n-defensive\";\nimport * as Fs from \"fs\";\nimport * as Path from \"path\";\nimport { ArgumentException } from \"n-exception\";\n\nexport class BundleFile\n{\n    private readonly _name: string;\n    private readonly _path: string;\n\n    \n    public get name(): string { return this._name; }\n    \n    \n    public constructor(path: string)\n    {\n        given(path, \"path\").ensureHasValue().ensure(t => !t.isEmptyOrWhiteSpace());\n        \n        this._name = Path.basename(path);\n        this._path = path;\n    }\n    \n    \n    public read(): string\n    {\n        return Fs.readFileSync(this._path, \"utf8\");\n    }\n}"]}