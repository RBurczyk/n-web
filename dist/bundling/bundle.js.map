{"version":3,"file":"bundle.js","sourceRoot":"","sources":["../../src/bundling/bundle.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,6CAAoC;AACpC,iDAA6C;AAE7C,uCAAgD;AAChD,iDAA6C;AAE7C,iBAAe;AAGf;IASI,YAAmB,IAAY;QANd,aAAQ,GAAG,IAAI,KAAK,EAAe,CAAC;QAQjD,mBAAK,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC,cAAc,EAAE,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,mBAAmB,EAAE,CAAC,CAAC;QAE3E,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,IAAI,EAAE,CAAC;IAC7B,CAAC;IARD,IAAc,IAAI,KAAa,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;IAW5C,OAAO,CAAC,IAAY;QAEvB,IAAI,KAAK,GAAG,IAAI,0BAAW,CAAC,IAAI,CAAC,CAAC;QAClC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAC1B,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IAEY,MAAM;;YAEf,IAAI,MAAM,GAAW,IAAI,CAAC;YAE1B,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAChB,CAAC;gBACG,MAAM,GAAG,0BAAW,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;gBACtC,EAAE,CAAC,CAAC,MAAM,CAAC;oBACP,MAAM,CAAC,MAAM,CAAC;YACtB,CAAC;YAED,MAAM,GAAG,MAAM,IAAI,CAAC,YAAY,EAAE,CAAC;YAEnC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC;gBACZ,0BAAW,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;YAExC,MAAM,CAAC,MAAM,CAAC;QAClB,CAAC;KAAA;IAKS,QAAQ,CAAC,OAAe;QAE9B,mBAAK,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC,cAAc,EAAE;aACrC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,mBAAmB,EAAE,IAAI,CAAC,CAAC,IAAI,EAAE,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC;QAEvE,OAAO,GAAG,OAAO,CAAC,IAAI,EAAE,CAAC;QAEzB,IAAI,KAAK,GAAG,IAAI,KAAK,EAAc,CAAC;QACpC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,IAAI,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QAC/D,MAAM,CAAC,KAAK,CAAC;IACjB,CAAC;IAES,KAAK;QAEX,IAAI,GAAG,GAAG,+BAAoB,CAAC,SAAS,CAAS,KAAK,CAAC,CAAC;QACxD,MAAM,CAAC,GAAG,KAAK,IAAI,IAAI,GAAG,CAAC,IAAI,EAAE,CAAC,WAAW,EAAE,KAAK,KAAK,CAAC;IAC9D,CAAC;CACJ;AA/DD,wBA+DC","sourcesContent":["import { given } from \"n-defensive\";\nimport { BundleEntry } from \"./bundle-entry\";\nimport { ArgumentException } from \"n-exception\";\nimport { ConfigurationManager } from \"n-config\";\nimport { BundleCache } from \"./bundle-cache\";\nimport * as Path from \"path\";\nimport \"n-ext\";\nimport { BundleFile } from \"./bundle-file\";\n\nexport abstract class Bundle\n{\n    private readonly _name: string;\n    private readonly _entries = new Array<BundleEntry>();\n    \n    \n    protected get name(): string { return this._name; }\n    \n    \n    public constructor(name: string)\n    {\n        given(name, \"name\").ensureHasValue().ensure(t => !t.isEmptyOrWhiteSpace());\n        \n        this._name = name.trim();\n    }\n    \n    \n    public include(path: string): this\n    {\n        let entry = new BundleEntry(path);\n        this._entries.push(entry);\n        return this;\n    }\n    \n    public async render(): Promise<string>\n    {\n        let result: string = null;\n        \n        if (!this.isDev)\n        {\n            result = BundleCache.find(this._name);\n            if (result)\n                return result;\n        } \n        \n        result = await this.renderBundle();\n        \n        if (!this.isDev)\n            BundleCache.add(this._name, result);\n        \n        return result;\n    }\n    \n    \n    protected abstract renderBundle(): Promise<string>;\n    \n    protected getFiles(fileExt: string): ReadonlyArray<BundleFile>\n    {\n        given(fileExt, \"fileExt\").ensureHasValue()\n            .ensure(t => !t.isEmptyOrWhiteSpace() && t.trim().startsWith(\".\"));\n\n        fileExt = fileExt.trim();\n\n        let files = new Array<BundleFile>();\n        this._entries.forEach(t => files.push(...t.getFiles(fileExt)));\n        return files;\n    }\n    \n    protected isDev(): boolean\n    {\n        let env = ConfigurationManager.getConfig<string>(\"env\");\n        return env !== null && env.trim().toLowerCase() === \"dev\";\n    }\n}"]}