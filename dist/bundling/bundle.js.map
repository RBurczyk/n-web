{"version":3,"file":"bundle.js","sourceRoot":"","sources":["../../src/bundling/bundle.ts"],"names":[],"mappings":";;AAAA,6CAAoC;AACpC,iDAA6C;AAC7C,6CAAgD;AAChD,uCAAgD;AAChD,iDAA6C;AAE7C;IAUI,YAAsB,GAAW;QAPhB,aAAQ,GAAG,IAAI,KAAK,EAAe,CAAC;QASjD,mBAAK,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC,cAAc,EAAE,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,mBAAmB,EAAE,CAAC,CAAC;QAEzE,IAAI,CAAC,IAAI,GAAG,GAAG,CAAC,IAAI,EAAE,CAAC;IAC3B,CAAC;IATD,IAAc,GAAG,KAAa,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;IACjD,IAAc,OAAO,KAAiC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;IAWtE,WAAW,CAAC,QAAgB;QAE/B,mBAAK,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC,cAAc,EAAE,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,mBAAmB,EAAE,CAAC,CAAC;QAEnF,IAAI,KAAK,GAAG,IAAI,0BAAW,CAAC,QAAQ,CAAC,CAAC;QACtC,EAAE,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC;YACZ,MAAM,IAAI,+BAAiB,CAAC,SAAS,KAAK,CAAC,IAAI,GAAG,EAAE,gBAAgB,CAAC,CAAC;QAE1E,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAC1B,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IAEM,UAAU,CAAC,OAAe;QAE7B,mBAAK,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC,cAAc,EAAE,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,mBAAmB,EAAE,CAAC,CAAC;QAEjF,IAAI,KAAK,GAAG,IAAI,0BAAW,CAAC,OAAO,CAAC,CAAC;QACrC,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC;YACb,MAAM,IAAI,+BAAiB,CAAC,SAAS,KAAK,CAAC,IAAI,GAAG,EAAE,oBAAoB,CAAC,CAAC;QAE9E,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAC1B,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IAEM,MAAM;QAET,IAAI,MAAM,GAAW,IAAI,CAAC;QAE1B,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAChB,CAAC;YACG,MAAM,GAAG,0BAAW,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACrC,EAAE,CAAC,CAAC,MAAM,CAAC;gBACP,MAAM,CAAC,MAAM,CAAC;QACtB,CAAC;QAED,MAAM,GAAG,IAAI,CAAC,YAAY,EAAE,CAAC;QAE7B,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC;YACZ,0BAAW,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;QAEvC,MAAM,CAAC,MAAM,CAAC;IAClB,CAAC;IAKS,KAAK;QAEX,IAAI,IAAI,GAAG,+BAAoB,CAAC,SAAS,CAAS,MAAM,CAAC,CAAC;QAC1D,MAAM,CAAC,IAAI,KAAK,IAAI,IAAI,IAAI,CAAC,IAAI,EAAE,CAAC,WAAW,EAAE,KAAK,KAAK,CAAC;IAChE,CAAC;CACJ;AArED,wBAqEC","sourcesContent":["import { given } from \"n-defensive\";\nimport { BundleEntry } from \"./bundle-entry\";\nimport { ArgumentException } from \"n-exception\";\nimport { ConfigurationManager } from \"n-config\";\nimport { BundleCache } from \"./bundle-cache\";\n\nexport abstract class Bundle\n{\n    private readonly _key: string;\n    private readonly _entries = new Array<BundleEntry>();\n    \n    \n    protected get key(): string { return this._key; }\n    protected get entries(): ReadonlyArray<BundleEntry> { return this._entries; }\n    \n    \n    protected constructor(key: string)\n    {\n        given(key, \"key\").ensureHasValue().ensure(t => !t.isEmptyOrWhiteSpace());\n        \n        this._key = key.trim();\n    }\n    \n    \n    public includeFile(filePath: string): this\n    {\n        given(filePath, \"filePath\").ensureHasValue().ensure(t => !t.isEmptyOrWhiteSpace());\n        \n        let entry = new BundleEntry(filePath);\n        if (entry.isDir)\n            throw new ArgumentException(`Path [${entry.path}]`, \"is a directory\");\n        \n        this._entries.push(entry);\n        return this;\n    }\n    \n    public includeDir(dirPath: string): this\n    {\n        given(dirPath, \"dirPath\").ensureHasValue().ensure(t => !t.isEmptyOrWhiteSpace());\n\n        let entry = new BundleEntry(dirPath);\n        if (!entry.isDir)\n            throw new ArgumentException(`Path [${entry.path}]`, \"is not a directory\");\n\n        this._entries.push(entry);\n        return this;\n    }\n    \n    public render(): string\n    {\n        let result: string = null;\n        \n        if (!this.isDev)\n        {\n            result = BundleCache.find(this._key);\n            if (result)\n                return result;\n        } \n        \n        result = this.renderBundle();\n        \n        if (!this.isDev)\n            BundleCache.add(this._key, result);\n        \n        return result;\n    }\n    \n    \n    protected abstract renderBundle(): string;\n    \n    protected isDev(): boolean\n    {\n        let mode = ConfigurationManager.getConfig<string>(\"mode\");\n        return mode !== null && mode.trim().toLowerCase() === \"dev\";\n    }\n}"]}