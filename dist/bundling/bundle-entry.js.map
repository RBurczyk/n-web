{"version":3,"file":"bundle-entry.js","sourceRoot":"","sources":["../../src/bundling/bundle-entry.ts"],"names":[],"mappings":"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","sourcesContent":["import { given } from \"n-defensive\";\nimport * as Fs from \"fs\";\nimport * as Path from \"path\";\nimport { ArgumentException } from \"n-exception\";\nimport { BundleFile } from \"./bundle-file\";\n\n\nexport class BundleEntry\n{\n    private readonly _path: string;\n    private readonly _fullPath: string;\n    private readonly _isDir: boolean = false;\n    \n    \n    public get path(): string { return this._path; }\n    public get isDir(): boolean { return this._isDir; }\n    \n    \n    public constructor(path: string)\n    {\n        given(path, \"path\").ensureHasValue().ensure(t => !t.isEmptyOrWhiteSpace());\n        \n        path = path.trim();\n        if (!path.startsWith(\"/\"))\n            path = \"/\" + path;\n        \n        let fullPath = Path.join(process.cwd(), path);\n        \n        if (!Fs.existsSync(fullPath))\n            throw new ArgumentException(`path [${fullPath}]`, \"does not exist\");\n\n        this._path = path;\n        this._fullPath = fullPath;\n        this._isDir = Fs.statSync(fullPath).isDirectory();\n    }\n    \n    \n    public read(filterExt?: string): Array<BundleFile>\n    {\n        filterExt = filterExt ? filterExt.trim() : null;\n                \n        let result = new Array<BundleFile>();\n        \n        if (!this._isDir)\n        {\n            if (filterExt)\n            {\n                if (this._path.endsWith(filterExt))\n                    result.push(new BundleFile(this._path));\n            }\n            else\n            {\n                result.push(new BundleFile(this._path));\n            }    \n        }  \n        else\n        {\n            this.accumulateFilesToProcess(this._fullPath, filterExt, result);   \n        }\n        \n        return result;\n    }\n    \n    \n    private accumulateFilesToProcess(filePath: string, filterExt: string, accumulator: Array<BundleFile>): void\n    {\n        if (!Fs.statSync(filePath).isDirectory())\n        {\n            if (filterExt)\n            {\n                if (this._path.endsWith(filterExt))\n                    accumulator.push(new BundleFile(filePath));\n            }\n            else\n            {\n                accumulator.push(new BundleFile(filePath));\n            }    \n        }\n        else\n        {\n            let files = Fs.readdirSync(filePath);\n            for (let item of files)\n                this.accumulateFilesToProcess(Path.join(filePath, item), filterExt, accumulator);\n        }    \n    }\n    \n    \n    \n}"]}