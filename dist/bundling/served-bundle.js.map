{"version":3,"file":"served-bundle.js","sourceRoot":"","sources":["../../src/bundling/served-bundle.ts"],"names":[],"mappings":";;AAAA,6CAAoC;AACpC,qCAAkC;AAClC,6BAA6B;AAC7B,yBAAyB;AACzB,6CAAgD;AAChD,iBAAe;AAEf,iCAAiC;AACjC,yBAAyB;AAEzB,kBAAmC,SAAQ,eAAM;IAM7C,kEAAkE;IAClE,gEAAgE;IAGhE,YAAmB,IAAY,EAAE,UAAkB,EAAE,SAAiB;QAElE,mBAAK,CAAC,SAAS,EAAE,WAAW,CAAC,CAAC,cAAc,EAAE,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,mBAAmB,EAAE,CAAC,CAAC;QACrF,mBAAK,CAAC,UAAU,EAAE,YAAY,CAAC,CAAC,cAAc,EAAE,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,mBAAmB,EAAE,CAAC,CAAC;QAEvF,UAAU,GAAG,UAAU,CAAC,IAAI,EAAE,CAAC;QAC/B,UAAU,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,UAAU,CAAC,CAAC;QAElD,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC;YAC3B,MAAM,IAAI,+BAAiB,CAAC,cAAc,UAAU,GAAG,EAAE,gBAAgB,CAAC,CAAC;QAE/E,KAAK,CAAC,IAAI,CAAC,CAAC;QAEZ,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC;QAE9B,SAAS,GAAG,SAAS,CAAC,IAAI,EAAE,CAAC;QAC7B,EAAE,CAAC,CAAC,SAAS,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;YAC1B,SAAS,GAAG,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;QACpC,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC;QAE5B,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;YAC5C,MAAM,IAAI,+BAAiB,CAAC,aAAa,IAAI,CAAC,UAAU,GAAG,EAAE,gCAAgC,IAAI,CAAC,WAAW,GAAG,CAAC,CAAC;IAC1H,CAAC;IAGS,YAAY,CAAC,OAAe;QAElC,mBAAK,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC,cAAc,EAAE;aACrC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,mBAAmB,EAAE,IAAI,CAAC,CAAC,IAAI,EAAE,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC;QAEvE,OAAO,GAAG,OAAO,CAAC,IAAI,EAAE,CAAC;QAEzB,IAAI,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;QAEnC,IAAI,OAAO,GAAG,EAAE,CAAC;QACjB,KAAK,CAAC,OAAO,CAAC,CAAC,IAAI,OAAO,IAAI,EAAE,CAAC,GAAG,GAAG,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC;QAEjD,IAAI,IAAI,GAAG,MAAM,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;QACvC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;QACrB,IAAI,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QAEnC,IAAI,cAAc,GAAG,GAAG,IAAI,CAAC,IAAI,IAAI,SAAS,IAAI,OAAO,EAAE,CAAC;QAC5D,IAAI,cAAc,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,cAAc,CAAC,CAAC;QAEjE,EAAE,CAAC,aAAa,CAAC,cAAc,EAAE,OAAO,CAAC,CAAC;QAE1C,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,cAAc,CAAC,CAAC;IACtD,CAAC;CACJ;AA1DD,oCA0DC","sourcesContent":["import { given } from \"n-defensive\";\nimport { Bundle } from \"./bundle\";\nimport * as Path from \"path\";\nimport * as Fs from \"fs\";\nimport { ArgumentException } from \"n-exception\";\nimport \"n-ext\";\nimport { BundleFile } from \"./bundle-file\"; \nimport * as Crypto from \"crypto\";\nimport * as Os from \"os\";\n\nexport abstract class ServedBundle extends Bundle\n{\n    private readonly _bundlePath: string;\n    private readonly _servePath: string;\n    \n    \n    // protected get bundlePath(): string { return this._bundlePath; }\n    // protected get servePath(): string { return this._servePath; }\n    \n    \n    public constructor(name: string, bundlePath: string, servePath: string)\n    {\n        given(servePath, \"servePath\").ensureHasValue().ensure(t => !t.isEmptyOrWhiteSpace());\n        given(bundlePath, \"bundlePath\").ensureHasValue().ensure(t => !t.isEmptyOrWhiteSpace());\n        \n        bundlePath = bundlePath.trim();\n        bundlePath = Path.join(process.cwd(), bundlePath);\n        \n        if (!Fs.existsSync(bundlePath))\n            throw new ArgumentException(`bundlePath[${bundlePath}]`, \"does not exist\");\n        \n        super(name);\n        \n        this._bundlePath = bundlePath;\n        \n        servePath = servePath.trim();\n        if (servePath.startsWith(\"/\"))\n            servePath = servePath.substr(1);\n        this._servePath = servePath;\n        \n        if (!this._bundlePath.contains(this._servePath))\n            throw new ArgumentException(`servePath[${this._servePath}]`, `is not related to bundlePath[${this._bundlePath}]`);    \n    }\n    \n    \n    protected createBundle(fileExt: string): string\n    {\n        given(fileExt, \"fileExt\").ensureHasValue()\n            .ensure(t => !t.isEmptyOrWhiteSpace() && t.trim().startsWith(\".\"));\n\n        fileExt = fileExt.trim();\n        \n        let files = this.getFiles(fileExt);\n\n        let content = \"\";\n        files.forEach(t => content += Os.EOL + t.read());\n\n        let hash = Crypto.createHash(\"sha256\");\n        hash.update(content);\n        let hashValue = hash.digest(\"hex\");\n\n        let bundleFileName = `${this.name}_${hashValue}.${fileExt}`;\n        let bundleFilePath = Path.join(this._bundlePath, bundleFileName);\n\n        Fs.writeFileSync(bundleFilePath, content);\n        \n        return Path.join(this._servePath, bundleFileName);\n    }\n}"]}