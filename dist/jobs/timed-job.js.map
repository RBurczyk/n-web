{"version":3,"file":"timed-job.js","sourceRoot":"","sources":["../../src/jobs/timed-job.ts"],"names":[],"mappings":";;AACA,0DAAiD;AACjD,gDAA0D;AAI1D,MAAsB,QAAQ;IAQ1B,YAAmB,MAAc,EAAE,oBAA4B;QAE3D,mBAAK,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC,cAAc,EAAE,CAAC,cAAc,EAAE,CAAC;QAC1D,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;QAEtB,mBAAK,CAAC,oBAAoB,EAAE,sBAAsB,CAAC,CAAC,cAAc,EAAE,CAAC,cAAc,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;QAC1G,IAAI,CAAC,qBAAqB,GAAG,oBAAoB,CAAC;QAElD,IAAI,CAAC,oBAAoB,GAAG,IAAI,4BAAmB,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAQ,CAAC,EAAE,IAAI,CAAC,qBAAqB,EAAE,KAAK,CAAC,CAAC;QAE/H,IAAI,CAAC,oBAAoB,CAAC,aAAa,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC;QAC1D,IAAI,CAAC,oBAAoB,CAAC,aAAa,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC;QAC1D,IAAI,CAAC,SAAS,GAAG,WAAW,CAAC,GAAG,EAAE;YAE9B,IAAI,IAAI,CAAC,oBAAoB,CAAC,WAAW,GAAG,CAAC;gBACzC,OAAO;YAEX,IAAI,CAAC,oBAAoB,CAAC,aAAa,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC;QAC9D,CAAC,EAAE,IAAI,CAAC,qBAAqB,CAAC,CAAC;IACnC,CAAC;IAKM,OAAO;QAEV,aAAa,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QAC9B,OAAO,IAAI,CAAC,oBAAoB,CAAC,OAAO,EAAE,CAAC;IAC/C,CAAC;CACJ;AArCD,4BAqCC","sourcesContent":["import { Logger } from \"@nivinjoseph/n-log\";\nimport { given } from \"@nivinjoseph/n-defensive\";\nimport { BackgroundProcessor } from \"@nivinjoseph/n-util\";\nimport { Job } from \"./job\";\n\n// public\nexport abstract class TimedJob implements Job\n{\n    private readonly _logger: Logger;\n    private readonly _intervalMilliseconds: number;\n    private readonly _backgroundProcessor: BackgroundProcessor;\n    private readonly _interval: any;\n\n\n    public constructor(logger: Logger, intervalMilliseconds: number)\n    {\n        given(logger, \"logger\").ensureHasValue().ensureIsObject();\n        this._logger = logger;\n\n        given(intervalMilliseconds, \"intervalMilliseconds\").ensureHasValue().ensureIsNumber().ensure(t => t >= 0);\n        this._intervalMilliseconds = intervalMilliseconds;\n\n        this._backgroundProcessor = new BackgroundProcessor((e) => this._logger.logError(e as any), this._intervalMilliseconds, false);\n\n        this._backgroundProcessor.processAction(() => this.run());\n        this._backgroundProcessor.processAction(() => this.run());\n        this._interval = setInterval(() =>\n        {\n            if (this._backgroundProcessor.queueLength > 2)\n                return;\n            \n            this._backgroundProcessor.processAction(() => this.run());\n        }, this._intervalMilliseconds);\n    }\n\n\n    public abstract run(): Promise<void>;\n\n    public dispose(): Promise<void>\n    {\n        clearInterval(this._interval);\n        return this._backgroundProcessor.dispose();\n    }\n}"]}