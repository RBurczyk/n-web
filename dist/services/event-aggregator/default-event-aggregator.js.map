{"version":3,"file":"default-event-aggregator.js","sourceRoot":"","sources":["../../../src/services/event-aggregator/default-event-aggregator.ts"],"names":[],"mappings":";;;;;;;;;;AAEA,0DAAiD;AAGjD;IAAA;QAEY,mBAAc,GAA6C,EAAE,CAAC;IA6B1E,CAAC;IA1BgB,OAAO,CAAC,KAAa,EAAE,GAAG,SAAgB;;YAEnD,mBAAK,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC,cAAc,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,mBAAmB,EAAE,CAAC,CAAC;YAE7E,KAAK,GAAG,KAAK,CAAC,IAAI,EAAE,CAAC;YAErB,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC;gBAC3B,OAAO;YAEX,MAAM,aAAa,GAAG,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;YACjD,MAAM,OAAO,CAAC,GAAG,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC;QACtE,CAAC;KAAA;IAEM,SAAS,CAAC,KAAa,EAAE,OAAqB;QAEjD,mBAAK,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC,cAAc,EAAE,CAAC;QACvC,mBAAK,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC,cAAc,EAAE,CAAC,cAAc,EAAE,CAAC;QAE5D,KAAK,GAAG,KAAK,CAAC,IAAI,EAAE,CAAC;QAErB,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC;YAC3B,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,GAAG,IAAI,KAAK,EAAgB,CAAC;QAE3D,MAAM,aAAa,GAAG,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;QACjD,aAAa,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IAChC,CAAC;CACJ;AA/BD,wDA+BC","sourcesContent":["import { EventAggregator } from \"./event-aggregator\";\nimport { EventHandler } from \"./event-handler\";\nimport { given } from \"@nivinjoseph/n-defensive\";\n\n\nexport class DefaultEventAggregator implements EventAggregator\n{\n    private _subscriptions: { [index: string]: Array<EventHandler> } = {};\n    \n    \n    public async publish(event: string, ...eventArgs: any[]): Promise<void>\n    {\n        given(event, \"event\").ensureHasValue().ensure(t => !t.isEmptyOrWhiteSpace());\n\n        event = event.trim();\n\n        if (!this._subscriptions[event])\n            return;\n        \n        const eventHandlers = this._subscriptions[event];\n        await Promise.all(eventHandlers.map(t => t.handle(...eventArgs)));\n    }\n    \n    public subscribe(event: string, handler: EventHandler): void\n    {\n        given(event, \"event\").ensureHasValue();\n        given(handler, \"handler\").ensureHasValue().ensureIsObject();\n        \n        event = event.trim();\n\n        if (!this._subscriptions[event])\n            this._subscriptions[event] = new Array<EventHandler>();\n\n        const eventHandlers = this._subscriptions[event];\n        eventHandlers.push(handler);\n    }\n}"]}