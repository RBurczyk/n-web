{"version":3,"file":"in-memory-event-sub-mgr.js","sourceRoot":"","sources":["../../../../src/services/event-driven-architecture/in-memory-implementation/in-memory-event-sub-mgr.ts"],"names":[],"mappings":";;AACA,gDAAgD;AAGhD,0DAAiD;AACjD,gDAA0D;AAC1D,+DAAyD;AAKzD,MAAa,mBAAmB;IAK5B,YAAmB,SAA8B;QAE7C,mBAAK,CAAC,SAAS,EAAE,WAAW,CAAC,CAAC,cAAc,EAAE,CAAC,YAAY,CAAC,4BAAmB,CAAC,CAAC;QACjF,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC;IAChC,CAAC;IAGM,UAAU,CAAC,SAAoB,EAAE,QAAkB,EAAE,QAAkB;QAE1E,mBAAK,CAAC,SAAS,EAAE,WAAW,CAAC,CAAC,cAAc,EAAE,CAAC,YAAY,CAAC,kBAAS,CAAC,CAAC;QACvE,mBAAK,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC,cAAc,EAAE,CAAC,cAAc,EAAE,CAAC;QAC9D,mBAAK,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC,cAAc,EAAE,CAAC,YAAY,CAAC,sCAAgB,CAAC,CAAC;QAE5E,MAAM,gBAAgB,GAAG,QAA4B,CAAC;QACtD,gBAAgB,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,EAAE;YAE7B,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC;gBACjB,OAAO;YAEX,MAAM,KAAK,GAAG,SAAS,CAAC,WAAW,EAAE,CAAC;YAChC,CAAE,CAAC,MAAM,GAAG,KAAK,CAAC;YACxB,MAAM,OAAO,GAAG,KAAK,CAAC,OAAO,CAA4B,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;YAE3E,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,GAAG,EAAE,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;QAC3D,CAAC,CAAC,CAAC;IACP,CAAC;CAEJ;AAhCD,kDAgCC","sourcesContent":["import { EventSubMgr } from \"../event-sub-mgr\";\nimport { Container } from \"@nivinjoseph/n-ject\";\nimport { EventMap } from \"../event-map\";\nimport { EventBus } from \"../event-bus\";\nimport { given } from \"@nivinjoseph/n-defensive\";\nimport { BackgroundProcessor } from \"@nivinjoseph/n-util\";\nimport { InMemoryEventBus } from \"./in-memory-event-bus\";\nimport { EdaEventHandler } from \"../eda-event-handler\";\nimport { EdaEvent } from \"../eda-event\";\n\n\nexport class InMemoryEventSubMgr implements EventSubMgr\n{\n    private readonly _processor: BackgroundProcessor;\n\n\n    public constructor(processor: BackgroundProcessor)\n    {\n        given(processor, \"processor\").ensureHasValue().ensureIsType(BackgroundProcessor);\n        this._processor = processor;\n    }\n    \n    \n    public initialize(container: Container, eventMap: EventMap, eventBus: EventBus): void\n    {\n        given(container, \"container\").ensureHasValue().ensureIsType(Container);\n        given(eventMap, \"eventMap\").ensureHasValue().ensureIsObject();\n        given(eventBus, \"eventBus\").ensureHasValue().ensureIsType(InMemoryEventBus);\n        \n        const inMemoryEventBus = eventBus as InMemoryEventBus;\n        inMemoryEventBus.onPublish((e) =>\n        {\n            if (!eventMap[e.name])\n                return;\n            \n            const scope = container.createScope();\n            (<any>e).$scope = scope;\n            const handler = scope.resolve<EdaEventHandler<EdaEvent>>(eventMap[e.name]);\n            \n            this._processor.processAction(() => handler.handle(e));\n        });\n    }\n    \n}"]}