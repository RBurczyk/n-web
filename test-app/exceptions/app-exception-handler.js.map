{"version":3,"file":"app-exception-handler.js","sourceRoot":"","sources":["app-exception-handler.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,6CAAqD;AAErD,yEAAmE;AACnE,6CAAkD;AAClD,mCAAgC;AAEhC,6CAAoC;AAIpC,IAAa,mBAAmB,GAAhC,yBAAiC,SAAQ,wBAAgB;IAKrD,YAAmB,MAAc;QAE7B,mBAAK,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC,cAAc,EAAE,CAAC;QACzC,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;IAC1B,CAAC;IAGY,MAAM,CAAC,GAAc;;YAE9B,EAAE,CAAC,CAAC,GAAG,YAAY,gDAAqB,CAAC,CACzC,CAAC;gBACG,MAAM,IAAI,CAAC,2BAA2B,CAAC,GAA4B,CAAC,CAAC;YACzE,CAAC;YACD,IAAI,CACJ,CAAC;gBACG,MAAM,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;gBACjC,MAAM,IAAI,qBAAa,CAAC,GAAG,EAAE,wDAAwD,CAAC,CAAC;YAC3F,CAAC;QACL,CAAC;KAAA;IAEa,2BAA2B,CAAC,GAA0B;;YAEhE,MAAM,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;YACjC,MAAM,IAAI,qBAAa,CAAC,GAAG,EAAE,gBAAgB,CAAC,CAAC;QACnD,CAAC;KAAA;CACJ,CAAA;AA/BY,mBAAmB;IAD/B,eAAM,CAAC,QAAQ,CAAC;;GACJ,mBAAmB,CA+B/B;AA/BY,kDAAmB","sourcesContent":["import { ExceptionHandler } from \"./../../src/index\";\nimport { Exception } from \"n-exception\";\nimport { TodoNotFoundException } from \"./todo-not-found-exception\";\nimport { HttpException } from \"./../../src/index\";\nimport { inject } from \"n-ject\";\nimport { Logger } from \"./../services/logger/logger\";\nimport { given } from \"n-defensive\";\n\n\n@inject(\"Logger\")\nexport class AppExceptionHandler extends ExceptionHandler\n{\n    private readonly _logger: Logger;\n    \n    \n    public constructor(logger: Logger)\n    {\n        given(logger, \"logger\").ensureHasValue();\n        super();\n        this._logger = logger;\n    }\n    \n    \n    public async handle(exp: Exception): Promise<any>\n    {\n        if (exp instanceof TodoNotFoundException)\n        {\n            await this.handleTodoNotFoundException(exp as TodoNotFoundException);\n        }    \n        else\n        {\n            await this._logger.logError(exp);\n            throw new HttpException(500, \"We encountered a problem while processing your request\");\n        }    \n    }\n        \n    private async handleTodoNotFoundException(exp: TodoNotFoundException): Promise<any>\n    {\n        await this._logger.logError(exp);\n        throw new HttpException(404, \"todo not found\");\n    }\n}"]}