{"version":3,"file":"get-todos-controller.js","sourceRoot":"","sources":["get-todos-controller.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,6CAAoC;AAEpC,gDAAkE;AAClE,sCAAsC;AAEtC,mCAAgC;AAKhC,IAAa,kBAAkB,GAA/B,wBAAgC,SAAQ,kBAAU;IAM9C,YAAmB,WAAwB,EAAE,aAA4B;QAErE,mBAAK,CAAC,WAAW,EAAE,aAAa,CAAC,CAAC,cAAc,EAAE,CAAC;QACnD,mBAAK,CAAC,aAAa,EAAE,eAAe,CAAC,CAAC,cAAc,EAAE,CAAC;QACvD,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,YAAY,GAAG,WAAW,CAAC;QAChC,IAAI,CAAC,cAAc,GAAG,aAAa,CAAC;IACxC,CAAC;IAGY,OAAO;;YAEhB,IAAI,KAAK,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,QAAQ,EAAE,CAAC;YAC/C,IAAI,OAAO,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,UAAU,EAAE,CAAC;YACrD,MAAM,CAAC;gBACH,KAAK,EAAE,KAAK,CAAC,GAAG,CAAC,CAAC;oBAEd,MAAM,CAAC;wBACH,EAAE,EAAE,CAAC,CAAC,EAAE;wBACR,KAAK,EAAE,CAAC,CAAC,KAAK;wBACd,KAAK,EAAE;4BACH,IAAI,EAAE,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,OAAO,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,EAAE,EAAE,OAAO,CAAC;yBAChE;qBACJ,CAAC;gBACN,CAAC,CAAC;gBACF,KAAK,EAAE;oBACH,MAAM,EAAE,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,UAAU,EAAE,IAAI,EAAE,OAAO,CAAC;iBAC7D;aACJ,CAAC;QACN,CAAC;KAAA;CACJ,CAAA;AApCY,kBAAkB;IAH9B,eAAO;IACP,aAAK,CAAC,MAAM,CAAC,QAAQ,CAAC;IACtB,eAAM,CAAC,aAAa,EAAE,eAAe,CAAC;;GAC1B,kBAAkB,CAoC9B;AApCY,gDAAkB","sourcesContent":["import { given } from \"n-defensive\";\nimport { TodoManager } from \"./../../services/todo-manager/todo-manager\";\nimport { httpGet, route, Controller } from \"./../../../src/index\";\nimport * as Routes from \"./../routes\";\nimport { ConfigService } from \"./../../services/config-service/config-service\";\nimport { inject } from \"n-ject\";\n\n@httpGet\n@route(Routes.getTodos)\n@inject(\"TodoManager\", \"ConfigService\")\nexport class GetTodosController extends Controller\n{\n    private readonly _todoManager: TodoManager;\n    private readonly _configService: ConfigService;\n    \n    \n    public constructor(todoManager: TodoManager, configService: ConfigService)\n    {\n        given(todoManager, \"todoManager\").ensureHasValue();\n        given(configService, \"configService\").ensureHasValue();\n        super();\n        this._todoManager = todoManager;\n        this._configService = configService;\n    }\n    \n    \n    public async execute(): Promise<object>\n    {       \n        let todos = await this._todoManager.getTodos();\n        let baseUrl = await this._configService.getBaseUrl();\n        return {\n            items: todos.map(t =>\n            {\n                return {\n                    id: t.id,\n                    title: t.title,\n                    links: {\n                        self: this.generateUrl(Routes.getTodo, { id: t.id }, baseUrl)\n                    }\n                };\n            }),\n            links: {\n                create: this.generateUrl(Routes.createTodo, null, baseUrl)\n            }\n        };\n    }\n}"]}