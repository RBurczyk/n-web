{"version":3,"file":"update-todo-controller.js","sourceRoot":"","sources":["update-todo-controller.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AACA,6CAAoC;AACpC,gDAAiF;AACjF,sCAAsC;AAEtC,mCAAgC;AAChC,2CAA+C;AAK/C,IAAa,oBAAoB,GAAjC,0BAAkC,SAAQ,kBAAU;IAMhD,YAAmB,WAAwB,EAAE,aAA4B;QAErE,mBAAK,CAAC,WAAW,EAAE,aAAa,CAAC,CAAC,cAAc,EAAE,CAAC;QACnD,mBAAK,CAAC,aAAa,EAAE,eAAe,CAAC,CAAC,cAAc,EAAE,CAAC;QACvD,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,YAAY,GAAG,WAAW,CAAC;QAChC,IAAI,CAAC,cAAc,GAAG,aAAa,CAAC;IACxC,CAAC;IAGY,OAAO,CAAC,EAAU,EAAE,KAAY;;YAEzC,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;YAE1B,IAAI,IAAI,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,EAAE,EAAE,KAAK,CAAC,KAAK,EAAE,KAAK,CAAC,WAAW,CAAC,CAAC;YAElF,IAAI,OAAO,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,UAAU,EAAE,CAAC;YACrD,MAAM,CAAC;gBACH,EAAE,EAAE,IAAI,CAAC,EAAE;gBACX,KAAK,EAAE,IAAI,CAAC,KAAK;gBACjB,WAAW,EAAE,IAAI,CAAC,WAAW;gBAC7B,KAAK,EAAE;oBACH,IAAI,EAAE,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,OAAO,EAAE,EAAE,EAAE,EAAE,IAAI,CAAC,EAAE,EAAE,EAAE,OAAO,CAAC;oBAChE,MAAM,EAAE,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,UAAU,EAAE,EAAE,EAAE,EAAE,IAAI,CAAC,EAAE,EAAE,EAAE,OAAO,CAAC;oBACrE,MAAM,EAAE,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,UAAU,EAAE,EAAE,EAAE,EAAE,IAAI,CAAC,EAAE,EAAE,EAAE,OAAO,CAAC;iBACxE;aACJ,CAAC;QACN,CAAC;KAAA;IAEO,aAAa,CAAC,KAAY;QAE9B,IAAI,SAAS,GAAG,IAAI,sBAAS,EAAS,CAAC;QACvC,SAAS,CAAC,GAAG,CAAS,OAAO,CAAC,CAAC,UAAU,EAAE,CAAC,iBAAiB,CAAC,mBAAM,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC,CAAC;QACvF,SAAS,CAAC,GAAG,CAAS,aAAa,CAAC,CAAC,UAAU,EAAE,CAAC,iBAAiB,CAAC,mBAAM,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC,CAAC;QAE9F,SAAS,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;QAC1B,EAAE,CAAC,CAAC,SAAS,CAAC,SAAS,CAAC;YACpB,MAAM,IAAI,qBAAa,CAAC,GAAG,EAAE,SAAS,CAAC,MAAM,CAAC,CAAC;IACvD,CAAC;CACJ,CAAA;AA7CY,oBAAoB;IAHhC,eAAO;IACP,aAAK,CAAC,MAAM,CAAC,UAAU,CAAC;IACxB,eAAM,CAAC,aAAa,EAAE,eAAe,CAAC;;GAC1B,oBAAoB,CA6ChC;AA7CY,oDAAoB","sourcesContent":["import { TodoManager } from \"./../../services/todo-manager/todo-manager\";\nimport { given } from \"n-defensive\";\nimport { httpPut, route, Controller, HttpException } from \"./../../../src/index\";\nimport * as Routes from \"./../routes\";\nimport { ConfigService } from \"./../../services/config-service/config-service\";\nimport { inject } from \"n-ject\";\nimport { Validator, strval } from \"n-validate\";\n\n@httpPut\n@route(Routes.updateTodo) \n@inject(\"TodoManager\", \"ConfigService\")    \nexport class UpdateTodoController extends Controller\n{\n    private readonly _todoManager: TodoManager;\n    private readonly _configService: ConfigService;\n    \n    \n    public constructor(todoManager: TodoManager, configService: ConfigService)\n    {\n        given(todoManager, \"todoManager\").ensureHasValue();\n        given(configService, \"configService\").ensureHasValue();\n        super();\n        this._todoManager = todoManager;\n        this._configService = configService;\n    }\n    \n    \n    public async execute(id: number, model: Model): Promise<any>\n    {\n        this.validateModel(model);\n        \n        let todo = await this._todoManager.updateTodo(id, model.title, model.description);\n        \n        let baseUrl = await this._configService.getBaseUrl();\n        return {\n            id: todo.id,\n            title: todo.title,\n            description: todo.description,\n            links: {\n                self: this.generateUrl(Routes.getTodo, { id: todo.id }, baseUrl),\n                update: this.generateUrl(Routes.updateTodo, { id: todo.id }, baseUrl),\n                delete: this.generateUrl(Routes.deleteTodo, { id: todo.id }, baseUrl)\n            }\n        };\n    }\n    \n    private validateModel(model: Model): void\n    {\n        let validator = new Validator<Model>();\n        validator.for<string>(\"title\").isRequired().useValidationRule(strval.hasMaxLength(10));\n        validator.for<string>(\"description\").isOptional().useValidationRule(strval.hasMaxLength(100));\n\n        validator.validate(model);\n        if (validator.hasErrors)\n            throw new HttpException(400, validator.errors);\n    }\n}\n\ninterface Model\n{\n    title: string;\n    description: string;\n}"]}