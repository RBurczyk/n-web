{"version":3,"file":"inmemory-todo-manager.js","sourceRoot":"","sources":["inmemory-todo-manager.ts"],"names":[],"mappings":"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","sourcesContent":["import { TodoManager } from \"./todo-manager\";\nimport { Todo } from \"./../../models/todo\";\nimport \"n-ext\";\nimport { ApplicationException } from \"n-exception\";\nimport { given } from \"n-defensive\";\nimport { Logger } from \"./../logger/logger\";\nimport { inject } from \"n-ject\";\n\n@inject(\"Logger\")\nexport class InmemoryTodoManager implements TodoManager\n{\n    private readonly _todos: Array<Todo> = [];\n    private readonly _logger: Logger;\n    \n    \n    public constructor(logger: Logger)\n    {\n        given(logger, \"logger\").ensureHasValue();\n        this._logger = logger;\n    }\n    \n    \n    public async getTodos(): Promise<Todo[]>\n    {\n        await this._logger.logInfo(\"Getting TODOs\");\n        return this._todos.map(t => t);\n    }\n    \n    public async addTodo(title: string, description: string): Promise<Todo>\n    {\n        given(title, \"title\").ensureHasValue().ensure(t => !t.isEmptyOrWhiteSpace());\n        \n        let lastId = this._todos.length === 0 ? 0 : this._todos.orderByDesc(t => t.id)[0].id;\n        let todo = new Todo(lastId + 1, title, description);\n        this._todos.push(todo);\n        await this._logger.logInfo(`Added TODO with id ${todo.id}`);\n        return todo;\n    }\n    \n    public async updateTodo(id: number, title: string, description: string): Promise<Todo>\n    {\n        given(id, \"id\").ensureHasValue().ensure(t => t > 0);\n        given(title, \"title\").ensureHasValue().ensure(t => !t.isEmptyOrWhiteSpace());\n        \n        let todo = this._todos.find(t => t.id === id);\n        if (todo == null)\n            throw new ApplicationException(\"Todo with id {0} not found.\".format(id));\n        \n        this._todos.remove(todo);\n        todo = new Todo(todo.id, title, description);\n        this._todos.push(todo);\n        await this._logger.logInfo(`Updated TODO with id ${todo.id}`);\n        return todo;\n    }\n    \n    public async deleteTodo(id: number): Promise<void>\n    {\n        given(id, \"id\").ensureHasValue();\n        \n        let todo = this._todos.find(t => t.id === id);\n        if (todo == null)\n        {\n            await this._logger.logError(`Attempted to delete non existent TODO with id ${id}.`);\n            return;\n        }\n        \n        this._todos.remove(todo);\n        await this._logger.logWarning(`TODO with id ${id} deleted.`);\n    }\n}"]}